{"ast":null,"code":"import _toConsumableArray from \"/home/conrad/Desktop/game-of-life/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/conrad/Desktop/game-of-life/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/conrad/Desktop/game-of-life/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/conrad/Desktop/game-of-life/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/conrad/Desktop/game-of-life/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/conrad/Desktop/game-of-life/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/conrad/Desktop/game-of-life/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/conrad/Desktop/game-of-life/src/Board.js\";\nimport React from 'react';\nimport { Cell } from './Cell.js';\nexport var Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      cells: _this.buildArray(),\n      neighbors: _this.buildArray()\n    };\n    _this.isThereAnybodyOutThere = _this.isThereAnybodyOutThere.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getNeighborCount = _this.getNeighborCount.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateNeighbors = _this.updateNeighbors.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.nextGen = _this.nextGen.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.runGame = _this.runGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"buildArray\",\n    value: function buildArray() {\n      var sq = [];\n      var row = Array(this.props.size).fill(0);\n\n      for (var i = 0; i < this.props.size; i++) {\n        sq.push(row);\n      }\n\n      return sq;\n    }\n  }, {\n    key: \"isThereAnybodyOutThere\",\n    value: function isThereAnybodyOutThere(x, y, val) {\n      var new_arr = [];\n\n      var copy_cells = _toConsumableArray(this.state.cells);\n\n      for (var i = 0; i < copy_cells.length; i++) {\n        if (i != x) {\n          new_arr.push(copy_cells[i]);\n        } else {\n          var new_row = [];\n          var old_row = copy_cells[i];\n\n          for (var j = 0; j < copy_cells.length; j++) {\n            if (j != y) {\n              new_row.push(old_row[j]);\n            } else {\n              new_row.push(val);\n            }\n          }\n\n          new_arr.push(new_row);\n        }\n      }\n\n      this.setState({\n        cells: new_arr\n      });\n      console.log(new_arr[0]);\n    }\n  }, {\n    key: \"updateNeighbors\",\n    value: function updateNeighbors() {\n      var neighbor_counts = [];\n      var length = this.state.cells.length;\n\n      for (var i = 0; i < length; i++) {\n        var row = [];\n\n        for (var j = 0; j < length; j++) {\n          row.push(this.getNeighborCount(i, j));\n        }\n\n        neighbor_counts.push(row);\n      }\n\n      this.setState({\n        neighbors: neighbor_counts\n      });\n    }\n  }, {\n    key: \"getNeighborCount\",\n    value: function getNeighborCount(i, j) {\n      var living_neighbors = 0;\n\n      for (var x = i - 1; x <= i + 1; x++) {\n        for (var y = j - 1; y <= j + 1; y++) {\n          var not_me = x == i && y == j;\n          var in_bounds = x >= 0 && y >= 0 && x < this.props.size && y < this.props.size;\n\n          if (not_me && in_bounds) {\n            living_neighbors += this.state.cells[x][y];\n          }\n        }\n      }\n\n      console.log(this.state.cells[0]);\n      return living_neighbors;\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(i, j) {\n      var cellWidth = Math.round(this.props.width / this.props.size);\n      return React.createElement(Cell, {\n        width: cellWidth,\n        row_pos: i,\n        col_pos: j,\n        call_back: this.isThereAnybodyOutThere,\n        run: this.props.run,\n        alive: this.state.cells[i][j],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderTable\",\n    value: function renderTable() {\n      var table = [];\n\n      for (var i = 0; i < this.props.size; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.size; j++) {\n          row.push(this.renderCell(i, j));\n        }\n\n        table.push(React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, row));\n      }\n\n      return table;\n    }\n  }, {\n    key: \"nextGen\",\n    value: function nextGen() {\n      if (this.props.run) {\n        var new_arr = [];\n        var length = this.state.cells.length;\n\n        for (var i = 0; i < length; i++) {\n          var new_row = [];\n\n          for (var j = 0; j < length; j++) {\n            var alive = this.state.cells[i][j] == 1;\n            var n = this.state.neighbors[i][j];\n            var stay_alive = alive && n > 1 && n <= 3;\n            var born_again = !alive && n == 3;\n\n            if (stay_alive || born_again) {\n              new_row.push(1);\n            } else {\n              new_row.push(0);\n            }\n          }\n\n          new_arr.push(new_row);\n        }\n\n        this.setState({\n          cells: new_arr\n        });\n      }\n    }\n  }, {\n    key: \"runGame\",\n    value: function runGame() {\n      if (this.props.run) {\n        this.updateNeighbors();\n      }\n\n      this.nextGen();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.timerID = setInterval(this.runGame, 1000);\n    }\n  }, {\n    key: \"componentDidUnmount\",\n    value: function componentDidUnmount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tableStyle = {\n        borderWidth: 2,\n        borderStyle: 'solid',\n        borderColor: '#232323',\n        borderRadius: 5,\n        width: this.props.width,\n        margin: 'auto'\n      };\n      return React.createElement(\"table\", {\n        style: tableStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, this.renderTable()));\n    }\n  }]);\n\n  return Board;\n}(React.Component);","map":{"version":3,"sources":["/home/conrad/Desktop/game-of-life/src/Board.js"],"names":["React","Cell","Board","props","state","cells","buildArray","neighbors","isThereAnybodyOutThere","bind","getNeighborCount","updateNeighbors","nextGen","runGame","sq","row","Array","size","fill","i","push","x","y","val","new_arr","copy_cells","length","new_row","old_row","j","setState","console","log","neighbor_counts","living_neighbors","not_me","in_bounds","cellWidth","Math","round","width","run","table","renderCell","alive","n","stay_alive","born_again","timerID","setInterval","clearInterval","tableStyle","borderWidth","borderStyle","borderColor","borderRadius","margin","renderTable","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Cell} from './Cell.js';\n\nexport class Board extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcells: this.buildArray(),\n\t\t\tneighbors: this.buildArray(),\n\t\t};\n\t\tthis.isThereAnybodyOutThere = this.isThereAnybodyOutThere.bind(this);\n\t\tthis.getNeighborCount = this.getNeighborCount.bind(this);\n\t\tthis.updateNeighbors = this.updateNeighbors.bind(this);\n\t\tthis.nextGen = this.nextGen.bind(this);\n\t\tthis.runGame = this.runGame.bind(this);\n\t}\n\n\tbuildArray(){\n\t\tlet sq = [];\n\t\tlet row = Array(this.props.size).fill(0);\n\t\tfor(let i = 0; i < this.props.size; i++){\n\t\t\tsq.push(row);\n\t\t}\n\t\treturn sq;\n\t}\n\n\tisThereAnybodyOutThere(x, y, val){\n\t\tlet new_arr = [];\n\t\tlet copy_cells = [...this.state.cells];\n\t\t\n\t\tfor(let i = 0; i < copy_cells.length; i++){\n\t\t\tif(i != x){\n\t\t\t\tnew_arr.push(copy_cells[i]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet new_row = [];\n\t\t\t\tlet old_row = copy_cells[i];\n\t\t\t\tfor(let j = 0; j < copy_cells.length; j++){\n\t\t\t\t\tif(j != y){\n\t\t\t\t\t\tnew_row.push(old_row[j]);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tnew_row.push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnew_arr.push(new_row);\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({cells: new_arr});\n\t\t\n\t\tconsole.log(new_arr[0]);\n\n\t}\n\n\tupdateNeighbors(){\n\t\tlet neighbor_counts = [];\n\t\tlet length = this.state.cells.length;\n\t\tfor(let i = 0; i < length; i++){\n\t\t\tlet row = []\n\t\t\tfor(let j = 0; j < length; j++){\n\t\t\t\trow.push(this.getNeighborCount(i, j));\n\t\t\t}\n\t\t\tneighbor_counts.push(row);\n\t\t}\n\n\t\tthis.setState({neighbors: neighbor_counts,});\n\t}\n\n\tgetNeighborCount(i, j){\n\t\tlet living_neighbors = 0;\n\t\tfor(let x = i - 1; x <= i + 1; x++){\n\t\t\tfor(let y = j - 1; y <= j + 1; y++){\n\t\t\t\tlet not_me = (x==i && y==j);\n\t\t\t\tlet in_bounds = x >= 0 && y >= 0 && x < this.props.size && y < this.props.size;\n\t\t\t\tif(not_me && in_bounds){\n\t\t\t\tliving_neighbors += this.state.cells[x][y];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(this.state.cells[0])\n\t\treturn living_neighbors;\n\t}\n\n\trenderCell(i, j){\n\t\tlet cellWidth = Math.round(this.props.width/this.props.size);\n\t\treturn (\n\t\t\t<Cell \n\t\t\t\twidth={cellWidth}\n\t\t\t\trow_pos={i}\n\t\t\t\tcol_pos={j}\n\t\t\t\tcall_back={this.isThereAnybodyOutThere}\n\t\t\t\trun={this.props.run}\n\t\t\t\talive={this.state.cells[i][j]}\t\n\t\t\t\t\n\t\t\t/>\n\t\t       );\n\t}\n\n\trenderTable(){\n\n\t\tlet table = [];\n\t\tfor(let i = 0; i < this.props.size; i++){\n\t\t\tlet row = [];\n\t\t\tfor(let j = 0; j < this.props.size; j++){\n\t\t\t\trow.push(this.renderCell(i, j));\n\t\t\t}\n\t\t\ttable.push(<tr>{row}</tr>);\n\t\t}\n\t\treturn table;\n\t}\n\n\tnextGen(){\n\t\tif(this.props.run){\n\t\t\tlet new_arr = [];\n\t\t\tlet length = this.state.cells.length;\n\t\t\tfor(let i = 0; i < length; i++){\n\t\t\t\tlet new_row = [];\n\t\t\t\tfor(let j = 0; j < length; j++){\n\t\t\t\t\tlet alive = (this.state.cells[i][j] == 1);\n\t\t\t\t\tlet n = this.state.neighbors[i][j];\n\n\t\t\t\t\tlet stay_alive = (alive && n > 1 && n <= 3);\n\t\t\t\t\tlet born_again = (!alive && n == 3);\n\n\t\t\t\t\tif(stay_alive || born_again){\n\t\t\t \t\t\tnew_row.push(1);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tnew_row.push(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnew_arr.push(new_row);\n\t\t\t}\n\t\t\n\t\t\tthis.setState({cells: new_arr,});\n\t\t}\n\t}\t\t\n\n\trunGame(){\n\t\tif(this.props.run){\n\t\t\tthis.updateNeighbors();\n\t\t}\n\t\tthis.nextGen();\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.timerID = setInterval(this.runGame, 1000);\n\t}\n\n\tcomponentDidUnmount(){\n\t\tclearInterval(this.timerID);\n\t}\n\n\trender(){\n\n\t\tlet tableStyle = {\n\t\t\tborderWidth: 2,\n\t\t\tborderStyle: 'solid',\n\t\t\tborderColor: '#232323',\n\t\t\tborderRadius: 5,\n\t\t\twidth: this.props.width,\n\t\t\tmargin: 'auto',\n\t\t}\n\t\treturn (<table style={tableStyle}><tbody>{this.renderTable()}</tbody></table>);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}