{"version":3,"sources":["Heading.js","Cell.js","Board.js","Game.js","serviceWorker.js","index.js"],"names":["Heading","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","style","textAlign","React","Component","Cell","props","_this","call","state","alive","setState","n","call_back","row_pos","col_pos","nextProps","cellStyle","backgroundColor","width","height","onClick","handleClick","bind","Board","cells","buildArray","neighbors","isThereAnybodyOutThere","assertThisInitialized","getNeighborCount","updateNeighbors","nextGen","runGame","sq","row","Array","size","fill","i","push","x","y","val","new_arr","copy_cells","toConsumableArray","length","new_row","old_row","j","neighbor_counts","living_neighbors","not_me","in_bounds","cellWidth","Math","round","Cell_Cell","run","table","renderCell","timerID","setInterval","clearInterval","tableStyle","borderWidth","borderStyle","borderColor","borderRadius","margin","renderTable","Game","step","boardWidth","rowLength","isRunning","toggleRun","buttonStyle","background","color","padding","marginBottom","fontSize","Heading_Heading","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","Game_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b521e4bb.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Heading extends React.Component{\n\n\trender(){\n\n\t\tlet style = {\n\t\t\ttextAlign:'center',\n\t\t};\n\n\t\treturn (<div style={style}><h1>Conway{'\\''}s Game of Life</h1></div>);\n\t}\n}\n","import React from 'react';\n\nexport class Cell extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\talive: false,\n\t\t};\n\t}\n\n\thandleClick(){\n\t\t// toggle state when clicked on\n\t\tthis.setState({alive: !this.state.alive,});\n\t\t// turn boolean into 0 or 1 for use with Board array\n\t\tlet n = this.state.alive ? 0:1;\n\t\t// send position and value back to board\n\t\tthis.props.call_back(this.props.row_pos, this.props.col_pos, n);\n\t}\n\n\tcomponentWillReceiveProps(nextProps){\n\t\t/* this lifecycle method allowed me to update the\n\t\t * state of the cell anytime the nextGen() function\n\t\t * changed to cell array in the board class\n\t\t * (my daughter always corrects me when i do something\n\t\t * wrong - she's only 5 but she sure is smart!\n\t\t * I love you Cora\n\t\t */\n\t\tthis.setState({alive: nextProps.alive},);\n\t}\n\n\trender(){\n\t\tlet bg = this.state.alive ? '#0d0d1d':'#d0d0f0';\n\t\tlet cellStyle = {\n\t\t\tbackgroundColor: bg,\n\t\t\twidth: this.props.width,\n\t\t\theight: this.props.width,\n\t\t};\n\n\t\treturn (\n\t\t\t\t<td \n\t\t\tstyle={cellStyle} \n\t\t\tonClick={this.handleClick.bind(this)}\n\t\t\t></td>\n\t\t\t);\n\t}\n}\n\n","import React from 'react';\nimport {Cell} from './Cell.js';\n\nexport class Board extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcells: this.buildArray(),\n\t\t\tneighbors: this.buildArray(),\n\t\t};\n\t\n\t\tthis.isThereAnybodyOutThere = this.isThereAnybodyOutThere.bind(this);\n\t\tthis.getNeighborCount = this.getNeighborCount.bind(this);\n\t\tthis.updateNeighbors = this.updateNeighbors.bind(this);\n\t\tthis.nextGen = this.nextGen.bind(this);\n\t\tthis.runGame = this.runGame.bind(this);\n\t}\n\n\tbuildArray(){\n\t\t//builds a 2D array full of zeros\n\t\tlet sq = [];\n\t\tlet row = Array(this.props.size).fill(0);\n\n\t\tfor(let i = 0; i < this.props.size; i++){\n\t\t\tsq.push(row);\n\t\t}\n\n\t\treturn sq;\n\t}\n\n\tisThereAnybodyOutThere(x, y, val){\n\t\t/* this is the callback from the cell\n\t\t* it is called when a cell is clicked on\n\t\t* @param x,y grid location\n\t\t* @param val 0 = dead, 1 = alive\n\t\t*/\n\t\tlet new_arr = [];\n\t\tlet copy_cells = [...this.state.cells];\n\t\t\n\t\tfor(let i = 0; i < copy_cells.length; i++){\n\t\t\t// if it is not the row that contains the clicked on cell \n\t\t\tif(i != x){\n\t\t\t\t// push a copy into the new array\n\t\t\t\tnew_arr.push(copy_cells[i]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet new_row = [];\n\t\t\t\tlet old_row = copy_cells[i];\n\n\t\t\t\tfor(let j = 0; j < copy_cells.length; j++){\n\t\t\t\t\t// if it is not the clicked on cell\n\t\t\t\t\tif(j != y){\n\t\t\t\t\t\t// push whatever was there \n\t\t\t\t\t\tnew_row.push(old_row[j]);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// push val returned from the cell\n\t\t\t\t\t\tnew_row.push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// push the modified row into the new array\n\t\t\t\tnew_arr.push(new_row);\n\t\t\t}\n\t\t}\n\n\t\t// update state\n\t\tthis.setState({cells: new_arr});\n\t\tthis.updateNeighbors();\n\t}\n\n\tupdateNeighbors(){\n\t\t/* this method handles populating the neighbor array\n\t\t * with the neighbor counts returned from getNeighborCount\n\t\t */\n\n\t\tlet neighbor_counts = [];\n\t\tlet length = this.state.cells.length;\n\n\t\tfor(let i = 0; i < length; i++){\n\t\t\tlet row = []\n\n\t\t\tfor(let j = 0; j < length; j++){\n\t\t\t\t// push all the neighbor counts into a row\n\t\t\t\trow.push(this.getNeighborCount(i, j));\n\t\t\t}\n\t\t\t// push the row into the array\n\t\t\tneighbor_counts.push(row);\n\t\t}\n\t\t\n\t\t// update state \n\t\tthis.setState({neighbors: neighbor_counts,});\n\t}\n\n\tgetNeighborCount(i, j){\n\t\t/* this method handles the math of counting\n\t\t * neighboring cells\n\t\t * @param i, j loctation in grid\n\t\t * @return number of neighbors (0 - 8)\n\t\t */\n\n\t\tlet living_neighbors = 0;\n\n\t\t// double loop through region bordering cell @i, j\n\t\tfor(let x = i - 1; x <= i + 1; x++){\n\t\t\tfor(let y = j - 1; y <= j + 1; y++){\n\t\t\t\t// do not count itself\n\t\t\t\tlet not_me = !(x==i && y==j);\n\t\t\t\t//make sure index is in range (not negative, not exceeding size)\n\t\t\t\tlet in_bounds = x >= 0 && y >= 0 && x < this.props.size && y < this.props.size;\n\n\t\t\t\t// only count if valid index other than itself\n\t\t\t\tif(not_me && in_bounds){\n\t\t\t\t\t// add up the 1's (living neighbors)\n\t\t\t\t\tliving_neighbors += this.state.cells[x][y];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn living_neighbors;\n\t}\n\n\trenderCell(i, j){\n\t\t//renders cell @ grid location i, j\n\t\tlet cellWidth = Math.round(this.props.width/this.props.size);\n\t\t\n\t\treturn (\n\t\t\t<Cell \n\t\t\t\twidth={cellWidth}\n\t\t\t\trow_pos={i}\n\t\t\t\tcol_pos={j}\n\t\t\t\tcall_back={this.isThereAnybodyOutThere}\n\t\t\t\trun={this.props.run}\n\t\t\t\talive={this.state.cells[i][j]}\t\n\t\t\t/>\n\t\t       );\n\t}\n\n\trenderTable(){\n\t\t// renders table of cells\n\t\tlet table = [];\n\n\t\tfor(let i = 0; i < this.props.size; i++){\n\t\t\tlet row = [];\n\t\t\tfor(let j = 0; j < this.props.size; j++){\n\t\t\t\trow.push(this.renderCell(i, j));\n\t\t\t}\n\t\t\ttable.push(<tr>{row}</tr>);\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tnextGen(){\n\t\t/* this method handles all the game of life logic\n\t\t * living cells with less than 2 neighbors die\n\t\t * living cells with 2 or 3 neighbors live\n\t\t * living cells with more than 3 neighbors die\n\t\t * dead cells with exactly 3 neighbors come to life\n\t\t */\n\n\t\t//only calculate if in 'run' mode\n\t\tif(this.props.run){\n\t\t\tlet new_arr = [];\n\t\t\tlet length = this.state.cells.length;\n\n\t\t\t//loop through both 2D state arrays\n\t\t\tfor(let i = 0; i < length; i++){\n\t\t\t\tlet new_row = [];\n\t\t\t\tfor(let j = 0; j < length; j++){\n\n\t\t\t\t\t// the cell is alive!\n\t\t\t\t\tlet alive = (this.state.cells[i][j] == 1);\n\t\t\t\t\t// number of neighbors\n\t\t\t\t\tlet n = this.state.neighbors[i][j];\n\t\t\t\t\t// the cell will stay alive\n\t\t\t\t\tlet stay_alive = (alive && n > 1 && n <= 3);\n\t\t\t\t\t// the cell will come to life\n\t\t\t\t\tlet born_again = (!alive && n == 3);\n\n\t\t\t\t\t// push a 1 in if living or reborn\n\t\t\t\t\tif(stay_alive || born_again){\n\t\t\t \t\t\tnew_row.push(1);\n\t\t\t\t\t}\n\t\t\t\t\t// push a 0 for dead cells\n\t\t\t\t\telse{\n\t\t\t\t\t\tnew_row.push(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnew_arr.push(new_row);\n\t\t\t}\n\t\t\n\t\t\t//update state\n\t\t\tthis.setState({cells: new_arr,});\n\t\t}\n\t}\t\t\n\n\trunGame(){\n\t\t// this is the timer method\n\t\t\n\t\t// only update neighbors if in 'run' mode\n\t\tif(this.props.run){\n\t\t\tthis.updateNeighbors();\n\t\t}\n\t\t// run game logic\n\t\tthis.nextGen();\n\t}\n\n\tcomponentDidMount(){\n\t\t// start the timer when the board first renders\n\t\tthis.timerID = setInterval(this.runGame, 1000);\n\t}\n\n\tcomponentDidUnmount(){\n\t\t//clear the timer when the board is removed\n\t\tclearInterval(this.timerID);\n\t}\n\n\trender(){\n\n\t\tlet tableStyle = {\n\t\t\tborderWidth: 2,\n\t\t\tborderStyle: 'solid',\n\t\t\tborderColor: '#232323',\n\t\t\tborderRadius: 5,\n\t\t\twidth: this.props.width,\n\t\t\tmargin: 'auto',\n\t\t};\n\n\t\treturn (<table style={tableStyle}><tbody>{this.renderTable()}</tbody></table>);\n\t}\n}\n","import React from 'react';\nimport {Heading} from './Heading.js';\nimport {Board} from './Board.js';\n\nexport class Game extends React.Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tstep: 0,\n\t\t\tboardWidth: 420,\n\t\t\trowLength: 20,\n\t\t\tisRunning: false,\n\t\t};\n\n\t\tthis.toggleRun = this.toggleRun.bind(this);\n\t}\n\n\ttoggleRun(){\n\t\tthis.setState({\n\t\t\tisRunning: !this.state.isRunning,\n\t\t});\n\t}\n\n\trender(){\n\t\tconst buttonStyle = {\n\t\t\tbackground: this.state.isRunning ? '#000000':'#000000',\n\t\t\tcolor: this.state.isRunning ? '#ff0000':'#00ff00',\n\t\t\tpadding: 10,\n\t\t\tmarginBottom: 5,\n\t\t\tborderRadius: 5,\n\t\t\twidth: 75,\n\t\t\tfontSize: 19,\n\t\t};\n\n\t\tconst divStyle = {\n\t\t\twidth: 400,\n\t\t\ttextAlign: 'center',\n\t\t\tmargin: 'auto',\n\t\t};\n\n\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Heading step={this.state.step} />\n\t\t\t\t\t<div style={divStyle}>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tstyle={buttonStyle} \n\t\t\t\t\t\t\tonClick={this.toggleRun}\n\t\t\t\t\t\t>{this.state.isRunning ? \"stop\":\"start\"}</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Board \n\t\t\t\t\t\tsize={this.state.rowLength} \n\t\t\t\t\t\twidth={this.state.boardWidth} \n\t\t\t\t\t\trun={this.state.isRunning} \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t);\n\t}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from './Game.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}